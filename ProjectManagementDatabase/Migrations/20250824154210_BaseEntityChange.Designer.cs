// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ProjectManagementDatabase;

#nullable disable

namespace ProjectManagementDatabase.Migrations
{
    [DbContext(typeof(ProjectManagementContext))]
    [Migration("20250824154210_BaseEntityChange")]
    partial class BaseEntityChange
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.8");

            modelBuilder.Entity("ProjectManagementEntities.Models.Activity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ActualHours")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("PerformedOn")
                        .HasColumnType("TEXT");

                    b.Property<int?>("PlannedHours")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TaskItemId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("TaskItemId");

                    b.ToTable("Activities");
                });

            modelBuilder.Entity("ProjectManagementEntities.Models.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("HireDate")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("HourlyRate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("ProjectManagementEntities.Models.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ActualHours")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Code")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateOnly?>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("PlannedHours")
                        .HasColumnType("INTEGER");

                    b.Property<DateOnly?>("StartDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("TeamId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("ProjectManagementEntities.Models.ProjectTeam", b =>
                {
                    b.Property<int>("ProjectId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TeamId")
                        .HasColumnType("INTEGER");

                    b.Property<DateOnly>("From")
                        .HasColumnType("TEXT");

                    b.Property<DateOnly?>("To")
                        .HasColumnType("TEXT");

                    b.HasKey("ProjectId", "TeamId");

                    b.HasIndex("TeamId");

                    b.ToTable("ProjectTeams");
                });

            modelBuilder.Entity("ProjectManagementEntities.Models.TaskAssignment", b =>
                {
                    b.Property<int>("TaskItemId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("AssignedOn")
                        .HasColumnType("TEXT");

                    b.Property<int?>("PlannedHours")
                        .HasColumnType("INTEGER");

                    b.Property<string>("RoleOnTask")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.HasKey("TaskItemId", "EmployeeId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("TaskAssignments");
                });

            modelBuilder.Entity("ProjectManagementEntities.Models.TaskItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ActualHours")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("PlannedHours")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Priority")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<int>("WorkPackageId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("WorkPackageId");

                    b.ToTable("TaskItems");
                });

            modelBuilder.Entity("ProjectManagementEntities.Models.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("ProjectManagementEntities.Models.TeamMember", b =>
                {
                    b.Property<int>("TeamId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("JoinedOn")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("LeftOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleInTeam")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("TeamId", "EmployeeId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("TeamMembers");
                });

            modelBuilder.Entity("ProjectManagementEntities.Models.TimesheetEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ActivityId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Hours")
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasColumnType("TEXT");

                    b.Property<int>("TaskItemId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("WorkDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ActivityId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("TaskItemId");

                    b.ToTable("TimesheetEntries");
                });

            modelBuilder.Entity("ProjectManagementEntities.Models.WorkPackage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ActualHours")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("PlannedHours")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProjectId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("WorkPackages");
                });

            modelBuilder.Entity("ProjectManagementEntities.Models.Activity", b =>
                {
                    b.HasOne("ProjectManagementEntities.Models.TaskItem", "TaskItem")
                        .WithMany("Activities")
                        .HasForeignKey("TaskItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TaskItem");
                });

            modelBuilder.Entity("ProjectManagementEntities.Models.Project", b =>
                {
                    b.HasOne("ProjectManagementEntities.Models.Team", null)
                        .WithMany("Projects")
                        .HasForeignKey("TeamId");
                });

            modelBuilder.Entity("ProjectManagementEntities.Models.ProjectTeam", b =>
                {
                    b.HasOne("ProjectManagementEntities.Models.Project", "Project")
                        .WithMany("ProjectTeams")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectManagementEntities.Models.Team", "Team")
                        .WithMany("ProjectTeams")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("ProjectManagementEntities.Models.TaskAssignment", b =>
                {
                    b.HasOne("ProjectManagementEntities.Models.Employee", "Employee")
                        .WithMany("TaskAssignments")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectManagementEntities.Models.TaskItem", "TaskItem")
                        .WithMany("TaskAssignments")
                        .HasForeignKey("TaskItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("TaskItem");
                });

            modelBuilder.Entity("ProjectManagementEntities.Models.TaskItem", b =>
                {
                    b.HasOne("ProjectManagementEntities.Models.WorkPackage", "WorkPackage")
                        .WithMany("Tasks")
                        .HasForeignKey("WorkPackageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WorkPackage");
                });

            modelBuilder.Entity("ProjectManagementEntities.Models.TeamMember", b =>
                {
                    b.HasOne("ProjectManagementEntities.Models.Employee", "Employee")
                        .WithMany("TeamMemberships")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectManagementEntities.Models.Team", "Team")
                        .WithMany("TeamMembers")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("ProjectManagementEntities.Models.TimesheetEntry", b =>
                {
                    b.HasOne("ProjectManagementEntities.Models.Activity", "Activity")
                        .WithMany("TimesheetEntries")
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ProjectManagementEntities.Models.Employee", "Employee")
                        .WithMany("TimesheetEntries")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectManagementEntities.Models.TaskItem", "TaskItem")
                        .WithMany("TimesheetEntries")
                        .HasForeignKey("TaskItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Activity");

                    b.Navigation("Employee");

                    b.Navigation("TaskItem");
                });

            modelBuilder.Entity("ProjectManagementEntities.Models.WorkPackage", b =>
                {
                    b.HasOne("ProjectManagementEntities.Models.Project", "Project")
                        .WithMany("WorkPackages")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("ProjectManagementEntities.Models.Activity", b =>
                {
                    b.Navigation("TimesheetEntries");
                });

            modelBuilder.Entity("ProjectManagementEntities.Models.Employee", b =>
                {
                    b.Navigation("TaskAssignments");

                    b.Navigation("TeamMemberships");

                    b.Navigation("TimesheetEntries");
                });

            modelBuilder.Entity("ProjectManagementEntities.Models.Project", b =>
                {
                    b.Navigation("ProjectTeams");

                    b.Navigation("WorkPackages");
                });

            modelBuilder.Entity("ProjectManagementEntities.Models.TaskItem", b =>
                {
                    b.Navigation("Activities");

                    b.Navigation("TaskAssignments");

                    b.Navigation("TimesheetEntries");
                });

            modelBuilder.Entity("ProjectManagementEntities.Models.Team", b =>
                {
                    b.Navigation("ProjectTeams");

                    b.Navigation("Projects");

                    b.Navigation("TeamMembers");
                });

            modelBuilder.Entity("ProjectManagementEntities.Models.WorkPackage", b =>
                {
                    b.Navigation("Tasks");
                });
#pragma warning restore 612, 618
        }
    }
}
